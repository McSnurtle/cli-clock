"""
Automatically loads tabs from the tabs/ directory.

keybinds: dict[str, str] - a dictionary of "key button": "tab id"
draw_functions: dict[str, callable] - a dictionary of "tab id": "tab draw func"
tabs: dict[str, Any] - a dictionary of "tab id": "curses window"
"""
# imports - cli-clock, tab_registry.py
# All the functions needed by all the tabs
import curses
import pkgutil
import inspect
import importlib

from typing import Any

from .tabs.base import Tab

# ===== Variables =====
keybinds: dict[str, str] = {}
draw_functions: dict[str, callable] = {}
tips: list[str] = ["[Q]uit"]


# ===== Functions =====
def register_tabs(config: dict[str, Any]) -> None:
    # DOCS AND EXAMPLE CODE INSPIRING THIS FUNCTION WAS GENERATED BY AN AI:
    package = importlib.import_module(".tabs", "cli_clock")

    for module_finder, module_name, is_pkg in pkgutil.iter_modules(package.__path__):
        module = importlib.import_module(f".tabs.{module_name}", "cli_clock")
        for name, obj in inspect.getmembers(module, inspect.isclass):
            if issubclass(obj, Tab) and obj is not Tab:
                tab = obj(config)
                keybinds[tab.keybind] = tab.name
                draw_functions[tab.name] = tab.draw
                print(f"Log: registering data for tab {name}")

    for idx, key in enumerate(list(keybinds.keys())):
        tips.append(f"[{key.upper()}]{list(draw_functions.keys())[idx][1::]}")
